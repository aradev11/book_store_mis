[{"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\index.js":"1","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\reportWebVitals.js":"2","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\App.js":"3","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\routes.js":"4","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\footer\\footer.jsx":"5","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\private\\private_route.js":"6","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\un_private\\un_private.js":"7","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\breadcrumb\\breadcrumb.js":"8","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\admin\\admin-routes.js":"9","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\register\\register.js":"10","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\landing.js":"11","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\login\\login.js":"12","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\sidebar\\sidebar.jsx":"13","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\navbar\\navbar.jsx":"14","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-form.js":"15","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-form.jsx":"16","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\data\\layout\\layout-config.js":"17","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\utils\\error.js":"18","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-form.jsx":"19","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-form.jsx":"20","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-form.jsx":"21","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-from.jsx":"22","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-form.jsx":"23","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-form.jsx":"24","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-view.jsx":"25","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-view.jsx":"26","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-form.jsx":"27","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-view.jsx":"28","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-view.jsx":"29","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\header\\header.message.jsx":"30","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-view.jsx":"31","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-view.jsx":"32","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-view.js":"33","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\posts\\post.js":"34","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\utils\\protect.js":"35","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-view.jsx":"36","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-view.jsx":"37","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\table\\Table.js":"38","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\dashboard\\dashboard.jsx":"39","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\controlpanel\\controlpanel.jsx":"40"},{"size":590,"mtime":1614866015826,"results":"41","hashOfConfig":"42"},{"size":375,"mtime":1614866015826,"results":"43","hashOfConfig":"42"},{"size":734,"mtime":1614866015795,"results":"44","hashOfConfig":"42"},{"size":2711,"mtime":1614866015826,"results":"45","hashOfConfig":"42"},{"size":1108,"mtime":1614866015810,"results":"46","hashOfConfig":"42"},{"size":439,"mtime":1614866015826,"results":"47","hashOfConfig":"42"},{"size":379,"mtime":1614866015826,"results":"48","hashOfConfig":"42"},{"size":2429,"mtime":1614866015810,"results":"49","hashOfConfig":"42"},{"size":5465,"mtime":1614866015826,"results":"50","hashOfConfig":"42"},{"size":4100,"mtime":1614866015842,"results":"51","hashOfConfig":"42"},{"size":5337,"mtime":1614866015842,"results":"52","hashOfConfig":"42"},{"size":3796,"mtime":1614866015842,"results":"53","hashOfConfig":"42"},{"size":1443,"mtime":1614866015810,"results":"54","hashOfConfig":"42"},{"size":4541,"mtime":1614866015810,"results":"55","hashOfConfig":"42"},{"size":11362,"mtime":1614866015842,"results":"56","hashOfConfig":"42"},{"size":11259,"mtime":1615128293365,"results":"57","hashOfConfig":"42"},{"size":8451,"mtime":1615128142529,"results":"58","hashOfConfig":"42"},{"size":1409,"mtime":1614866015873,"results":"59","hashOfConfig":"42"},{"size":4858,"mtime":1614866015857,"results":"60","hashOfConfig":"42"},{"size":4133,"mtime":1614866015842,"results":"61","hashOfConfig":"42"},{"size":4745,"mtime":1614866015857,"results":"62","hashOfConfig":"42"},{"size":3539,"mtime":1614866015842,"results":"63","hashOfConfig":"42"},{"size":7735,"mtime":1614866015857,"results":"64","hashOfConfig":"42"},{"size":2249,"mtime":1614866015857,"results":"65","hashOfConfig":"42"},{"size":2005,"mtime":1614866015857,"results":"66","hashOfConfig":"42"},{"size":2026,"mtime":1614866015857,"results":"67","hashOfConfig":"42"},{"size":1803,"mtime":1614866015857,"results":"68","hashOfConfig":"42"},{"size":2030,"mtime":1614866015857,"results":"69","hashOfConfig":"42"},{"size":2023,"mtime":1614866015857,"results":"70","hashOfConfig":"42"},{"size":1238,"mtime":1614866015810,"results":"71","hashOfConfig":"42"},{"size":2013,"mtime":1614866015857,"results":"72","hashOfConfig":"42"},{"size":2010,"mtime":1614866015842,"results":"73","hashOfConfig":"42"},{"size":1990,"mtime":1614866015842,"results":"74","hashOfConfig":"42"},{"size":100,"mtime":1614866015857,"results":"75","hashOfConfig":"42"},{"size":322,"mtime":1614866015873,"results":"76","hashOfConfig":"42"},{"size":2022,"mtime":1614866015842,"results":"77","hashOfConfig":"42"},{"size":1907,"mtime":1615041264124,"results":"78","hashOfConfig":"42"},{"size":358,"mtime":1614866015826,"results":"79","hashOfConfig":"42"},{"size":138,"mtime":1614866015842,"results":"80","hashOfConfig":"42"},{"size":2434,"mtime":1614866015810,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"fssf4v",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"84"},"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\index.js",[],["170","171"],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\reportWebVitals.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\App.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\routes.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\footer\\footer.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\private\\private_route.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\un_private\\un_private.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\breadcrumb\\breadcrumb.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\router\\admin\\admin-routes.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\register\\register.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\landing.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\not__private\\auth\\login\\login.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\sidebar\\sidebar.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\navbar\\navbar.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-form.js",["172"],"import { useState, useEffect } from 'react';\r\nimport { useHistory, useRouteMatch, useParams } from 'react-router-dom';\r\nimport Error from '../../../utils/error';\r\nimport axios from 'axios';\r\n\r\nimport { \r\n    Form, \r\n    Row, \r\n    Col, \r\n    Button, \r\n    Input, \r\n    Space, \r\n    Select, \r\n    DatePicker, \r\n    InputNumber, \r\n    Typography,\r\n    Switch\r\n} from 'antd';\r\n\r\nimport { PlusOutlined, MinusCircleOutlined} from '@ant-design/icons';\r\nimport { ControlPanel } from '../../../components/controlpanel/controlpanel';\r\n\r\nconst EmployeeForm = () => {\r\n    const history = useHistory();\r\n    const { url } = useRouteMatch();\r\n    const { id } = useParams();\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState({});\r\n    const { Option } = Select;\r\n    const { Title } = Typography;\r\n    \r\n\r\n    const layout = {\r\n        labelCol: {\r\n            xs: { span: 24 },\r\n            sm: { span: 24 },\r\n            },\r\n            wrapperCol: {\r\n            xs: { span: 24 },\r\n            sm: { span: 24 },\r\n        },\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    \r\n    const onFinish = value => {\r\n        setFormData(value); \r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.post(\"/api/employee\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            history.push(`${url}/employee`);\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    const FetchPrivateDate = async () => {\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.get(`/api/employee/${id}`, config);\r\n            if(data && data.data) \r\n            setPrivateData(data.data)\r\n            form.setFieldsValue(privateData[0])\r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error);\r\n        }\r\n    }\r\n   \r\n    useEffect(() => {\r\n        if(id) {\r\n            FetchPrivateDate();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n            {...layout} \r\n            layout='vertical'\r\n            onFinish={onFinish}\r\n            form={form}\r\n            className='form-container'\r\n            name='employee-f'\r\n            >   \r\n                <ControlPanel onReset={onReset} />\r\n\r\n                <Row gutter={16} className='form-input-items' >\r\n                    <Col span={8}>\r\n                    <Title level={5}>Personal Information</Title>\r\n                        <Form.Item\r\n                        label=\"ID CARD\"\r\n                        name=\"id_card\"\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input maxLength={20} value={privateData.first_name}  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Firstname\"\r\n                            name=\"first_name\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Lastname\"\r\n                            name=\"last_name\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Fathername\"\r\n                            name=\"father_name\"\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        \r\n                        <Space>\r\n                            <Form.Item\r\n                                name='gender'\r\n                                hasFeedback\r\n                                label=\"Gender\"\r\n                                style={{width: 180}}\r\n                                rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                            >\r\n                                <Select >\r\n                                    <Option value=\"M\">Male</Option>\r\n                                    <Option value='F'>Female</Option>\r\n                                    <Option value='O'>Other</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name='dob'\r\n                                hasFeedback\r\n                                label=\"Date Of Birth\"\r\n                                rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                            >\r\n                                <DatePicker />\r\n                            </Form.Item>\r\n                        </Space >\r\n\r\n                        <Form.Item\r\n                            label=\"Position\"\r\n                            name=\"position\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Is Actived\"\r\n                            name=\"is_active\"\r\n                        >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    \r\n                    <Col span={8}>\r\n                        <Title level={5}>Contact Information</Title>\r\n                        <Form.Item\r\n                        label=\"Email Address\"\r\n                        name='email'\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >    \r\n                            <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                        label=\"Enter Country Code and Phone Number\"\r\n                        name='phone'\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <InputNumber style={{width:\"100%\"}} placeholder=\"937********\"  />\r\n                        </Form.Item>\r\n                        \r\n                        <Form.Item\r\n                            label=\"BIO\"\r\n                            name=\"describe\"\r\n                        >\r\n                            <Input.TextArea allowClear autoSize showCount rows={6} maxLength={255} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                   \r\n                    <Col span={8}>\r\n                        <Title level={5}>Contact Information</Title>\r\n                        \r\n                        <Form.List name=\"addresses\" {...layout} >\r\n                            {(fields, { add, remove }) => (\r\n                            <>\r\n                                {fields.map(field => (\r\n                                <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Street\"\r\n                                    name={[field.name, 'street']}\r\n                                    fieldKey={[field.fieldKey, 'street']}\r\n                                    rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Street\"/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Street2\"\r\n                                    name={[field.name, 'street2']}\r\n                                    fieldKey={[field.fieldKey, 'street2']}\r\n                                    >\r\n                                    <Input placeholder=\"Street 2\"/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label='Country'\r\n                                        name={[field.fieldKey, 'country']}\r\n                                        fieldKey={[field.fieldKey, 'country']}\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                    >\r\n                                        <Select placeholder=\"Country\">\r\n                                        <Option value=\"60159ef3b8143d12f0deed75\">Afghanistan</Option>\r\n                                        <Option value='60159ef3b8143ddeed75'>IR-IRAN</Option>\r\n                                        \r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.fieldKey, 'city']}\r\n                                        fieldKey={[field.fieldKey, 'city']}\r\n                                        label='City'\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                    >\r\n                                        <Select placeholder=\"City\">\r\n                                        <Option value=\"6015a014b8143d12f0deed7c\">Kabul</Option>\r\n                                        <Option value='6015a014b8143d12f0d'>Herat</Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                                </Space>\r\n                                ))}\r\n                                <Form.Item>\r\n                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                        Add field\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </>\r\n                            )}\r\n                        </Form.List>\r\n                    </Col>\r\n                </Row>    \r\n            </Form>\r\n\r\n            \r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default EmployeeForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-form.jsx",["173","174","175"],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\data\\layout\\layout-config.js",["176","177","178"],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\utils\\error.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-form.jsx",["179"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Protect Page\r\nimport { protect } from '../../../../utils/protect';\r\n// ERROR\r\nimport Error from '../../../../utils/error';\r\n// Controlpanel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\nconst AuthorForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/author\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            console.log(err)\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        protect({history})\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Firstname\"\r\n                    name=\"first_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Lastname\"\r\n                    name=\"last_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Biography\"\r\n                        name=\"about\"\r\n                    >\r\n                        <Input.TextArea showCount rows={5} maxLength={255} />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n\r\n                    <Form.Item\r\n                    label=\"From\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                             \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        \r\n                    >            \r\n                        <Input addonBefore=\"https://\" />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default AuthorForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-form.jsx",["180","181"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// ERROR\r\nimport Error from '../../../../utils/error';\r\n// Control Panel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Button, \r\n    Space,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Typography\r\n} from 'antd';\r\n\r\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons';\r\n\r\nconst CountryForm = () => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const { Title } = Typography;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/country\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n      \r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Code\"\r\n                    name=\"code\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                </Col>\r\n                <Col span={8}>\r\n                <Title level={5}>Contact Information</Title>\r\n                        \r\n                        <Form.List name=\"lang\" {...layout} >\r\n                            {(fields, { add, remove }) => (\r\n                            <>\r\n                                {fields.map(field => (\r\n                                <Space key={field.key} style={{ display: 'flex', marginBottom: 8, }} >\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Language\"\r\n                                    rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Languages\" style={{ width: \"100%\" }} />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                                </Space>\r\n                                ))}\r\n                                <Form.Item>\r\n                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                        Add field\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </>\r\n                            )}\r\n                        </Form.List>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CountryForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-form.jsx",["182"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Error\r\nimport Error from '../../../../utils/error';\r\n// Control Panle\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\nconst TransilatorForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/transilator\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Firstname\"\r\n                    name=\"first_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Lastname\"\r\n                    name=\"last_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Biography\"\r\n                        name=\"about\"\r\n                    >\r\n                        <Input.TextArea showCount rows={5} maxLength={255} />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n\r\n                    <Form.Item\r\n                    label=\"From\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                             \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        \r\n                    >            \r\n                        <Input addonBefore=\"https://\" />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TransilatorForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-from.jsx",["183"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { protect } from '../../../../utils/protect';\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\nimport Error from '../../../../utils/error';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\n\r\nconst CityForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n            \r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/city\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\");\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        protect({history})\r\n        fetchData();\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={5}>\r\n                    <Form.Item\r\n                    label=\"City Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    label=\"Country\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CityForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-form.jsx",["184","185"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Error\r\nimport Error from '../../../../utils/error';\r\n\r\n// Control Panel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\n// ANT\r\nimport { \r\n    Form, \r\n    Button, \r\n    Space,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    InputNumber,\r\n    Select,\r\n    Typography,\r\n    Empty\r\n} from 'antd';\r\n\r\nimport {PlusOutlined, MinusCircleOutlined, } from '@ant-design/icons';\r\n\r\nconst PublisherForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const [city, setCity] = useState([]);\r\n    const { Title } = Typography;\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/publisher\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    const setCityData = e => {\r\n        privateData.filter(item => {\r\n            if(item._id === e) {\r\n                setCity(item.cities)\r\n            }\r\n        })\r\n    }\r\n\r\n    const layout = {\r\n        labelCol: { span: 16 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n           <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Company Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n                    <Title level={5}>Contact Information</Title>\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Enter Country Code and Phone Number\"\r\n                    name='phone'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <InputNumber style={{width:\"100%\"}} placeholder=\"937********\"  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        rules={[{ required: true, message: 'Please input website!' }]}\r\n                    >            \r\n                        <Input addonBefore=\"http://\" />\r\n\r\n                    </Form.Item>\r\n               \r\n                </Col>\r\n               \r\n                <Col span={8}>\r\n                    <Title level={5}>Contact Information</Title>\r\n                    \r\n                    <Form.List name=\"addresses\" {...layout} >\r\n                        {(fields, { add, remove }) => (\r\n                        <>\r\n                            {fields.map(field => (\r\n                            <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                                <Form.Item\r\n                                {...field}\r\n                                label=\"District\"\r\n                                name={[field.name, 'street']}\r\n                                fieldKey={[field.fieldKey, 'street']}\r\n                                rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                >\r\n                                    <Input placeholder=\"District\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                {...field}\r\n                                label=\"Street\"\r\n                                name={[field.name, 'street2']}\r\n                                fieldKey={[field.fieldKey, 'street2']}\r\n                                >\r\n                                <Input placeholder=\"Street 2\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label='Country'\r\n                                    name={[field.fieldKey, 'country']}\r\n                                    fieldKey={[field.fieldKey, 'country']}\r\n                                    rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                >\r\n                                    <Select placeholder=\"Country\" onChange={e => setCityData(e)}>\r\n                                        {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                                        <Option key={i} value={item._id}>\r\n                                            {item.name}    \r\n                                        </Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.fieldKey, 'city']}\r\n                                    fieldKey={[field.fieldKey, 'city']}\r\n                                    label='City'\r\n                                    rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                >\r\n                                     <Select placeholder=\"City\">\r\n                                        {city.length === 0 ? <Empty />  : city.map((item, i) => (\r\n                                        <Option key={i} value={item._id}>{item.name}</Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                            </Space>\r\n                            ))}\r\n                            <Form.Item>\r\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                    Add field\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </>\r\n                        )}\r\n                    </Form.List>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\nexport default PublisherForm;","E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-form.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-form.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\header\\header.message.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-view.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\posts\\post.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\utils\\protect.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-view.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\table\\Table.js",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\screens\\private\\dashboard\\dashboard.jsx",[],"E:\\Git Project\\book_store_mis\\book_store_mis\\client\\src\\components\\controlpanel\\controlpanel.jsx",["186","187"],"import react, { useState } from 'react';\r\n\r\nimport { useRouteMatch, useHistory } from 'react-router-dom';\r\n\r\n// ANT\r\nimport { Form, Space, Button } from 'antd';\r\nimport { \r\n    PlusCircleOutlined, \r\n    DeleteOutlined, \r\n    EditOutlined, \r\n    SaveOutlined,\r\n    LeftCircleOutlined, \r\n    ClearOutlined \r\n} from '@ant-design/icons';\r\n\r\nexport const ControlPanel = (props) => {\r\n    const { url } = useRouteMatch();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            {props.type === \"view\" ? (\r\n                <Space style={{ marginBottom: 16 }} size='middle'>\r\n                    <Button \r\n                        type='primary' \r\n                        shape=\"round\"\r\n                        onClick={() => history.push(`${url}/add`)} \r\n                        icon={<PlusCircleOutlined />}>\r\n                        Add\r\n                    </Button>\r\n                    <Button \r\n                        onClick={props.onDelete}\r\n                        shape=\"round\"\r\n                        disabled\r\n                        danger\r\n                        icon={<DeleteOutlined />}\r\n                        >\r\n                        Delete\r\n                    </Button>\r\n                    <Button \r\n                        onClick={props.onEdit}\r\n                        shape=\"round\"\r\n                        disabled\r\n                        danger\r\n                        icon={<EditOutlined />}\r\n                        >\r\n                        Edit\r\n                    </Button>\r\n                </Space>\r\n            ) : (\r\n                <Space  className='form-action-items'>\r\n                <Form.Item>\r\n                    <Button htmlType=\"submit\" shape=\"round\" type='primary' icon={<SaveOutlined />} name='employeesumit' >\r\n                        Save\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"button\" danger shape=\"round\" icon={<LeftCircleOutlined />} onClick={() => window.history.back()}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"button\" shape=\"round\" icon={<ClearOutlined />} onClick={props.onReset}>\r\n                        Clean Form\r\n                    </Button>\r\n                </Form.Item>\r\n                </Space>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","severity":1,"message":"193","line":96,"column":8,"nodeType":"194","endLine":96,"endColumn":10,"suggestions":"195"},{"ruleId":"196","severity":1,"message":"197","line":26,"column":13,"nodeType":"198","messageId":"199","endLine":26,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":65,"column":33,"nodeType":"202","messageId":"203","endLine":65,"endColumn":35},{"ruleId":"192","severity":1,"message":"193","line":126,"column":8,"nodeType":"194","endLine":126,"endColumn":17,"suggestions":"204"},{"ruleId":"196","severity":1,"message":"205","line":1,"column":10,"nodeType":"198","messageId":"199","endLine":1,"endColumn":14},{"ruleId":"196","severity":1,"message":"206","line":10,"column":3,"nodeType":"198","messageId":"199","endLine":10,"endColumn":17},{"ruleId":"196","severity":1,"message":"207","line":11,"column":3,"nodeType":"198","messageId":"199","endLine":11,"endColumn":15},{"ruleId":"192","severity":1,"message":"208","line":74,"column":8,"nodeType":"194","endLine":74,"endColumn":17,"suggestions":"209"},{"ruleId":"196","severity":1,"message":"210","line":16,"column":5,"nodeType":"198","messageId":"199","endLine":16,"endColumn":11},{"ruleId":"196","severity":1,"message":"211","line":34,"column":11,"nodeType":"198","messageId":"199","endLine":34,"endColumn":24},{"ruleId":"192","severity":1,"message":"208","line":70,"column":8,"nodeType":"194","endLine":70,"endColumn":17,"suggestions":"212"},{"ruleId":"192","severity":1,"message":"208","line":73,"column":8,"nodeType":"194","endLine":73,"endColumn":17,"suggestions":"213"},{"ruleId":"192","severity":1,"message":"208","line":52,"column":8,"nodeType":"194","endLine":52,"endColumn":17,"suggestions":"214"},{"ruleId":"200","severity":1,"message":"201","line":78,"column":33,"nodeType":"202","messageId":"203","endLine":78,"endColumn":35},{"ruleId":"196","severity":1,"message":"215","line":1,"column":8,"nodeType":"198","messageId":"199","endLine":1,"endColumn":13},{"ruleId":"196","severity":1,"message":"216","line":1,"column":17,"nodeType":"198","messageId":"199","endLine":1,"endColumn":25},"no-native-reassign",["217"],"no-negated-in-lhs",["218"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'FetchPrivateDate' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["219"],"no-unused-vars","'url' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["220"],"'Link' is defined but never used.","'DeleteOutlined' is defined but never used.","'EditOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["221"],"'Select' is defined but never used.","'addNewCountry' is assigned a value but never used.",["222"],["223"],["224"],"'react' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"229","fix":"231"},{"desc":"229","fix":"232"},{"desc":"229","fix":"233"},"Update the dependencies array to be: [FetchPrivateDate, id]",{"range":"234","text":"235"},"Update the dependencies array to be: [FetchPrivateDate, history, id]",{"range":"236","text":"237"},"Update the dependencies array to be: [fetchData, history]",{"range":"238","text":"239"},{"range":"240","text":"239"},{"range":"241","text":"239"},{"range":"242","text":"239"},[2655,2657],"[FetchPrivateDate, id]",[3439,3448],"[FetchPrivateDate, history, id]",[1920,1929],"[fetchData, history]",[1802,1811],[1863,1872],[1303,1312]]