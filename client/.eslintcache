[{"D:\\My-git-projects\\book_store_mis\\client\\src\\index.js":"1","D:\\My-git-projects\\book_store_mis\\client\\src\\App.js":"2","D:\\My-git-projects\\book_store_mis\\client\\src\\reportWebVitals.js":"3","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\landing.js":"4","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\register\\register.js":"5","D:\\My-git-projects\\book_store_mis\\client\\src\\router\\private\\private_route.js":"6","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\login\\login.js":"7","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\slider\\slider.jsx":"8","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\header\\header.message.jsx":"9","D:\\My-git-projects\\book_store_mis\\client\\src\\router\\routes.js":"10","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\footer\\footer.jsx":"11","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\navbar\\navbar.jsx":"12","D:\\My-git-projects\\book_store_mis\\client\\src\\utils\\error.js":"13","D:\\My-git-projects\\book_store_mis\\client\\src\\router\\un_private\\un_private.js":"14","D:\\My-git-projects\\book_store_mis\\client\\src\\services\\auth-service.js":"15","D:\\My-git-projects\\book_store_mis\\client\\src\\router\\admin\\admin-routes.js":"16","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\posts\\post.js":"17","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\dashboard\\dashboard.jsx":"18","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\index.js":"19","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\sidebar\\sidebar.jsx":"20","D:\\My-git-projects\\book_store_mis\\client\\src\\data\\layout\\layout-config.js":"21","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-view.js":"22","D:\\My-git-projects\\book_store_mis\\client\\src\\utils\\protect.js":"23","D:\\My-git-projects\\book_store_mis\\client\\src\\axios.js":"24","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\table\\Table.js":"25","D:\\My-git-projects\\book_store_mis\\client\\src\\router\\views\\type.js":"26","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-form.js":"27","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\breadcrumb\\breadcrumb.js":"28","D:\\My-git-projects\\book_store_mis\\client\\src\\services\\employee-service.jsx":"29","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-view.jsx":"30","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-form.jsx":"31","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-view.jsx":"32","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-view.jsx":"33","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-view.jsx":"34","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-view.jsx":"35","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-view.jsx":"36","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-view.jsx":"37","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-view.jsx":"38","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-form.jsx":"39","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-form.jsx":"40","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-form.jsx":"41","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-form.jsx":"42","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-form.jsx":"43","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-from.jsx":"44","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-form.jsx":"45","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\controlpanel\\controlpanel.jsx":"46"},{"size":568,"mtime":1612358273822,"results":"47","hashOfConfig":"48"},{"size":701,"mtime":1612887819684,"results":"49","hashOfConfig":"48"},{"size":362,"mtime":499162500000,"results":"50","hashOfConfig":"48"},{"size":5337,"mtime":1612769147210,"results":"51","hashOfConfig":"48"},{"size":4100,"mtime":1612983190593,"results":"52","hashOfConfig":"48"},{"size":439,"mtime":1613627312156,"results":"53","hashOfConfig":"48"},{"size":3796,"mtime":1613626732499,"results":"54","hashOfConfig":"48"},{"size":1639,"mtime":1612462688882,"results":"55","hashOfConfig":"48"},{"size":1238,"mtime":1612635571764,"results":"56","hashOfConfig":"48"},{"size":2711,"mtime":1613796048205,"results":"57","hashOfConfig":"48"},{"size":1108,"mtime":1612878456771,"results":"58","hashOfConfig":"48"},{"size":4541,"mtime":1612878341419,"results":"59","hashOfConfig":"48"},{"size":1409,"mtime":1613629297998,"results":"60","hashOfConfig":"48"},{"size":379,"mtime":1612643377165,"results":"61","hashOfConfig":"48"},{"size":792,"mtime":1612854410753,"results":"62","hashOfConfig":"48"},{"size":5465,"mtime":1613976921476,"results":"63","hashOfConfig":"48"},{"size":100,"mtime":1612878154958,"results":"64","hashOfConfig":"48"},{"size":138,"mtime":1612878186633,"results":"65","hashOfConfig":"48"},{"size":82,"mtime":1612768511723,"results":"66","hashOfConfig":"48"},{"size":1443,"mtime":1613893638643,"results":"67","hashOfConfig":"48"},{"size":9907,"mtime":1613991567945,"results":"68","hashOfConfig":"48"},{"size":1990,"mtime":1613983027374,"results":"69","hashOfConfig":"48"},{"size":322,"mtime":1613905673353,"results":"70","hashOfConfig":"48"},{"size":0,"mtime":1612887207052,"results":"71","hashOfConfig":"48"},{"size":358,"mtime":1613899203460,"results":"72","hashOfConfig":"48"},{"size":932,"mtime":1613468268747,"results":"73","hashOfConfig":"48"},{"size":11362,"mtime":1613985060389,"results":"74","hashOfConfig":"48"},{"size":2429,"mtime":1613986760251,"results":"75","hashOfConfig":"48"},{"size":587,"mtime":1613638548849,"results":"76","hashOfConfig":"48"},{"size":1982,"mtime":1613983360775,"results":"77","hashOfConfig":"48"},{"size":280,"mtime":1613983392721,"results":"78","hashOfConfig":"48"},{"size":2022,"mtime":1613983825025,"results":"79","hashOfConfig":"48"},{"size":2010,"mtime":1613990698104,"results":"80","hashOfConfig":"48"},{"size":2005,"mtime":1613984890087,"results":"81","hashOfConfig":"48"},{"size":2030,"mtime":1613984680320,"results":"82","hashOfConfig":"48"},{"size":2023,"mtime":1613984360090,"results":"83","hashOfConfig":"48"},{"size":2026,"mtime":1613985481017,"results":"84","hashOfConfig":"48"},{"size":2013,"mtime":1613985014252,"results":"85","hashOfConfig":"48"},{"size":2249,"mtime":1613984823108,"results":"86","hashOfConfig":"48"},{"size":1803,"mtime":1613984249811,"results":"87","hashOfConfig":"48"},{"size":7735,"mtime":1613984469813,"results":"88","hashOfConfig":"48"},{"size":4745,"mtime":1613984589798,"results":"89","hashOfConfig":"48"},{"size":4858,"mtime":1613983971871,"results":"90","hashOfConfig":"48"},{"size":3539,"mtime":1613985421357,"results":"91","hashOfConfig":"48"},{"size":4133,"mtime":1613988678583,"results":"92","hashOfConfig":"48"},{"size":2434,"mtime":1613988710911,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"nxe2x0",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"124","messages":"125","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"96"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"96"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"96"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"96"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"96"},"D:\\My-git-projects\\book_store_mis\\client\\src\\index.js",[],["199","200"],"D:\\My-git-projects\\book_store_mis\\client\\src\\App.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\reportWebVitals.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\landing.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\register\\register.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\router\\private\\private_route.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\not__private\\auth\\login\\login.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\slider\\slider.jsx",[],["201","202"],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\header\\header.message.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\router\\routes.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\footer\\footer.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\navbar\\navbar.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\utils\\error.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\router\\un_private\\un_private.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\services\\auth-service.js",["203","204"],"D:\\My-git-projects\\book_store_mis\\client\\src\\router\\admin\\admin-routes.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\posts\\post.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\dashboard\\dashboard.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\index.js",["205"],"import React from 'react';\r\n\r\nexport default () => {\r\n    return <h1>Hello</h1>\r\n}",["206","207"],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\sidebar\\sidebar.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\data\\layout\\layout-config.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-view.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\utils\\protect.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\axios.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\components\\table\\Table.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\router\\views\\type.js",["208"],"import { useState, useEffect } from 'react';\r\nimport { useParams, Switch, Route, useRouteMatch } from 'react-router-dom';\r\n\r\nimport EmployeeForm from '../../screens/private/employee/employee-form';\r\n\r\nexport const ViewType = () => {\r\n    const { type } = useParams();\r\n    const { path, url } = useRouteMatch();\r\n    const [Routes, setRoutes] = useState({\r\n        exaxt: false,\r\n        path: \"\",\r\n        component: null\r\n    })\r\n  \r\n    const CheckType = () => {\r\n        if(`${path}/${type}` === `${url}/add`) {\r\n            setRoutes({\r\n                component: EmployeeForm,\r\n                path: `${path}/add`,\r\n                exact: false\r\n            })\r\n        }\r\n        if(`${path}/${type}` === `${url}/add`) {\r\n            console.log(\"helo\")\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        CheckType();\r\n    }, []);\r\n    return (\r\n        <Switch>\r\n            <Route {...Routes} />\r\n        </Switch>\r\n    )\r\n}",["209","210"],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\employee\\employee-form.js",["211"],"import { useState, useEffect } from 'react';\r\nimport { useHistory, useRouteMatch, useParams } from 'react-router-dom';\r\nimport Error from '../../../utils/error';\r\nimport axios from 'axios';\r\n\r\nimport { \r\n    Form, \r\n    Row, \r\n    Col, \r\n    Button, \r\n    Input, \r\n    Space, \r\n    Select, \r\n    DatePicker, \r\n    InputNumber, \r\n    Typography,\r\n    Switch\r\n} from 'antd';\r\n\r\nimport { PlusOutlined, MinusCircleOutlined} from '@ant-design/icons';\r\nimport { ControlPanel } from '../../../components/controlpanel/controlpanel';\r\n\r\nconst EmployeeForm = () => {\r\n    const history = useHistory();\r\n    const { url } = useRouteMatch();\r\n    const { id } = useParams();\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState({});\r\n    const { Option } = Select;\r\n    const { Title } = Typography;\r\n    \r\n\r\n    const layout = {\r\n        labelCol: {\r\n            xs: { span: 24 },\r\n            sm: { span: 24 },\r\n            },\r\n            wrapperCol: {\r\n            xs: { span: 24 },\r\n            sm: { span: 24 },\r\n        },\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    \r\n    const onFinish = value => {\r\n        setFormData(value); \r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.post(\"/api/employee\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            history.push(`${url}/employee`);\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    const FetchPrivateDate = async () => {\r\n        const config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n            }\r\n        }\r\n        try {\r\n            const { data } = await axios.get(`/api/employee/${id}`, config);\r\n            if(data && data.data) \r\n            setPrivateData(data.data)\r\n            form.setFieldsValue(privateData[0])\r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error);\r\n        }\r\n    }\r\n   \r\n    useEffect(() => {\r\n        if(id) {\r\n            FetchPrivateDate();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Form\r\n            {...layout} \r\n            layout='vertical'\r\n            onFinish={onFinish}\r\n            form={form}\r\n            className='form-container'\r\n            name='employee-f'\r\n            >   \r\n                <ControlPanel onReset={onReset} />\r\n\r\n                <Row gutter={16} className='form-input-items' >\r\n                    <Col span={8}>\r\n                    <Title level={5}>Personal Information</Title>\r\n                        <Form.Item\r\n                        label=\"ID CARD\"\r\n                        name=\"id_card\"\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input maxLength={20} value={privateData.first_name}  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Firstname\"\r\n                            name=\"first_name\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Lastname\"\r\n                            name=\"last_name\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Fathername\"\r\n                            name=\"father_name\"\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        \r\n                        <Space>\r\n                            <Form.Item\r\n                                name='gender'\r\n                                hasFeedback\r\n                                label=\"Gender\"\r\n                                style={{width: 180}}\r\n                                rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                            >\r\n                                <Select >\r\n                                    <Option value=\"M\">Male</Option>\r\n                                    <Option value='F'>Female</Option>\r\n                                    <Option value='O'>Other</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item\r\n                                name='dob'\r\n                                hasFeedback\r\n                                label=\"Date Of Birth\"\r\n                                rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                            >\r\n                                <DatePicker />\r\n                            </Form.Item>\r\n                        </Space >\r\n\r\n                        <Form.Item\r\n                            label=\"Position\"\r\n                            name=\"position\"\r\n                            rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <Input  />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"Is Actived\"\r\n                            name=\"is_active\"\r\n                        >\r\n                            <Switch />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    \r\n                    <Col span={8}>\r\n                        <Title level={5}>Contact Information</Title>\r\n                        <Form.Item\r\n                        label=\"Email Address\"\r\n                        name='email'\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >    \r\n                            <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                        label=\"Enter Country Code and Phone Number\"\r\n                        name='phone'\r\n                        rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                        >\r\n                            <InputNumber style={{width:\"100%\"}} placeholder=\"937********\"  />\r\n                        </Form.Item>\r\n                        \r\n                        <Form.Item\r\n                            label=\"BIO\"\r\n                            name=\"describe\"\r\n                        >\r\n                            <Input.TextArea allowClear autoSize showCount rows={6} maxLength={255} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                   \r\n                    <Col span={8}>\r\n                        <Title level={5}>Contact Information</Title>\r\n                        \r\n                        <Form.List name=\"addresses\" {...layout} >\r\n                            {(fields, { add, remove }) => (\r\n                            <>\r\n                                {fields.map(field => (\r\n                                <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Street\"\r\n                                    name={[field.name, 'street']}\r\n                                    fieldKey={[field.fieldKey, 'street']}\r\n                                    rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Street\"/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Street2\"\r\n                                    name={[field.name, 'street2']}\r\n                                    fieldKey={[field.fieldKey, 'street2']}\r\n                                    >\r\n                                    <Input placeholder=\"Street 2\"/>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label='Country'\r\n                                        name={[field.fieldKey, 'country']}\r\n                                        fieldKey={[field.fieldKey, 'country']}\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                    >\r\n                                        <Select placeholder=\"Country\">\r\n                                        <Option value=\"60159ef3b8143d12f0deed75\">Afghanistan</Option>\r\n                                        <Option value='60159ef3b8143ddeed75'>IR-IRAN</Option>\r\n                                        \r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name={[field.fieldKey, 'city']}\r\n                                        fieldKey={[field.fieldKey, 'city']}\r\n                                        label='City'\r\n                                        hasFeedback\r\n                                        rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                    >\r\n                                        <Select placeholder=\"City\">\r\n                                        <Option value=\"6015a014b8143d12f0deed7c\">Kabul</Option>\r\n                                        <Option value='6015a014b8143d12f0d'>Herat</Option>\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                                </Space>\r\n                                ))}\r\n                                <Form.Item>\r\n                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                        Add field\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </>\r\n                            )}\r\n                        </Form.List>\r\n                    </Col>\r\n                </Row>    \r\n            </Form>\r\n\r\n            \r\n        </div>        \r\n    )\r\n}\r\n\r\nexport default EmployeeForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\breadcrumb\\breadcrumb.js",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\services\\employee-service.jsx",["212"],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\customer\\customer-form.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-view.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\unit\\unit-form.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\category\\category-form.jsx",[],"D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\publisher\\publisher-form.jsx",["213","214"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Error\r\nimport Error from '../../../../utils/error';\r\n\r\n// Control Panel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\n// ANT\r\nimport { \r\n    Form, \r\n    Button, \r\n    Space,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    InputNumber,\r\n    Select,\r\n    Typography,\r\n    Empty\r\n} from 'antd';\r\n\r\nimport {PlusOutlined, MinusCircleOutlined, } from '@ant-design/icons';\r\n\r\nconst PublisherForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const [city, setCity] = useState([]);\r\n    const { Title } = Typography;\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/publisher\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    const setCityData = e => {\r\n        privateData.filter(item => {\r\n            if(item._id === e) {\r\n                setCity(item.cities)\r\n            }\r\n        })\r\n    }\r\n\r\n    const layout = {\r\n        labelCol: { span: 16 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n           <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Company Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n                    <Title level={5}>Contact Information</Title>\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Enter Country Code and Phone Number\"\r\n                    name='phone'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <InputNumber style={{width:\"100%\"}} placeholder=\"937********\"  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        rules={[{ required: true, message: 'Please input website!' }]}\r\n                    >            \r\n                        <Input addonBefore=\"http://\" />\r\n\r\n                    </Form.Item>\r\n               \r\n                </Col>\r\n               \r\n                <Col span={8}>\r\n                    <Title level={5}>Contact Information</Title>\r\n                    \r\n                    <Form.List name=\"addresses\" {...layout} >\r\n                        {(fields, { add, remove }) => (\r\n                        <>\r\n                            {fields.map(field => (\r\n                            <Space key={field.key} style={{ display: 'flex', marginBottom: 8 }} align=\"baseline\">\r\n                                <Form.Item\r\n                                {...field}\r\n                                label=\"District\"\r\n                                name={[field.name, 'street']}\r\n                                fieldKey={[field.fieldKey, 'street']}\r\n                                rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                >\r\n                                    <Input placeholder=\"District\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                {...field}\r\n                                label=\"Street\"\r\n                                name={[field.name, 'street2']}\r\n                                fieldKey={[field.fieldKey, 'street2']}\r\n                                >\r\n                                <Input placeholder=\"Street 2\"/>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    label='Country'\r\n                                    name={[field.fieldKey, 'country']}\r\n                                    fieldKey={[field.fieldKey, 'country']}\r\n                                    rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                >\r\n                                    <Select placeholder=\"Country\" onChange={e => setCityData(e)}>\r\n                                        {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                                        <Option key={i} value={item._id}>\r\n                                            {item.name}    \r\n                                        </Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <Form.Item\r\n                                    name={[field.fieldKey, 'city']}\r\n                                    fieldKey={[field.fieldKey, 'city']}\r\n                                    label='City'\r\n                                    rules={[{ required: true, message: 'field should not be empty!' }]}\r\n                                >\r\n                                     <Select placeholder=\"City\">\r\n                                        {city.length === 0 ? <Empty />  : city.map((item, i) => (\r\n                                        <Option key={i} value={item._id}>{item.name}</Option>\r\n                                        ))}\r\n                                    </Select>\r\n                                </Form.Item>\r\n                                <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                            </Space>\r\n                            ))}\r\n                            <Form.Item>\r\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                    Add field\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </>\r\n                        )}\r\n                    </Form.List>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\nexport default PublisherForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\transilator\\transilator-form.jsx",["215"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Error\r\nimport Error from '../../../../utils/error';\r\n// Control Panle\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\nconst TransilatorForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/transilator\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Firstname\"\r\n                    name=\"first_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Lastname\"\r\n                    name=\"last_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Biography\"\r\n                        name=\"about\"\r\n                    >\r\n                        <Input.TextArea showCount rows={5} maxLength={255} />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n\r\n                    <Form.Item\r\n                    label=\"From\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                             \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        \r\n                    >            \r\n                        <Input addonBefore=\"https://\" />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TransilatorForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\other\\author\\author-form.jsx",["216"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n// Protect Page\r\nimport { protect } from '../../../../utils/protect';\r\n// ERROR\r\nimport Error from '../../../../utils/error';\r\n// Controlpanel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\nconst AuthorForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/author\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            console.log(err)\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        protect({history})\r\n        fetchData()\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Firstname\"\r\n                    name=\"first_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Lastname\"\r\n                    name=\"last_name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Biography\"\r\n                        name=\"about\"\r\n                    >\r\n                        <Input.TextArea showCount rows={5} maxLength={255} />\r\n                    </Form.Item>\r\n                </Col>\r\n                <Col span={8}>\r\n\r\n                    <Form.Item\r\n                    label=\"From\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                             \r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Email Address\"\r\n                    name='email'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Input type='email' placeholder=\"example@gamil.com\"  />           \r\n                    </Form.Item>\r\n\r\n\r\n                    <Form.Item\r\n                        name=\"website\"\r\n                        label=\"Website\"\r\n                        \r\n                    >            \r\n                        <Input addonBefore=\"https://\" />\r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default AuthorForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\city\\city-from.jsx",["217"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { protect } from '../../../../utils/protect';\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\nimport Error from '../../../../utils/error';\r\n\r\nimport { \r\n    Form, \r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Empty\r\n} from 'antd';\r\n\r\n\r\nconst CityForm = ({history}) => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const [privateData, setPrivateData] = useState([]);\r\n    const { Option } = Select;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            const { data } = await axios.get('/api/country?dtl=show', config);\r\n            if(data || data.data) setPrivateData(data.data);\r\n            \r\n        } catch (error) {\r\n            Error.notification.error(error);\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/city\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\");\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        protect({history})\r\n        fetchData();\r\n    }, [history])\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={5}>\r\n                    <Form.Item\r\n                    label=\"City Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                    label=\"Country\"\r\n                    name='country'\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >    \r\n                        <Select placeholder=\"Country\" onChange={e => addNewCountry(e)}>\r\n                            {privateData.length === 0 ? <Empty />  : privateData.map((item, i) => (\r\n                            <Option key={i} value={item._id}>\r\n                                {item.name}    \r\n                            </Option>\r\n                            ))}\r\n                            <Option value='add' >\r\n                                Add New \r\n                            </Option> \r\n                        </Select>  \r\n                    </Form.Item>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CityForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\screens\\private\\location\\country\\country-form.jsx",["218","219"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n// ERROR\r\nimport Error from '../../../../utils/error';\r\n// Control Panel\r\nimport { ControlPanel } from '../../../../components/controlpanel/controlpanel';\r\n\r\nimport { \r\n    Form, \r\n    Button, \r\n    Space,\r\n    Input,\r\n    Row,\r\n    Col,\r\n    Select,\r\n    Typography\r\n} from 'antd';\r\n\r\nimport { PlusOutlined, MinusCircleOutlined } from '@ant-design/icons';\r\n\r\nconst CountryForm = () => {\r\n    const [form] = Form.useForm();\r\n    const [formData, setFormData] = useState({});\r\n    const { Title } = Typography;\r\n\r\n    const config = {\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"auth-token\")}`\r\n        }\r\n    }\r\n\r\n    const addNewCountry = e => {\r\n        if(e === 'add') {\r\n            alert(\"Add New\")\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields();\r\n    }\r\n\r\n    const onFinish = value => {\r\n        setFormData(value);\r\n        postHander();\r\n    }   \r\n\r\n    const postHander = async () => {\r\n        try {\r\n            const { data } = await axios.post(\"/api/country\", formData, config);\r\n            \r\n            if(!data) return Error.notification.error(\"Data Not Added\");\r\n\r\n            onReset();\r\n            Error.notification.success(\"Your Data Added Successfully\")\r\n            \r\n        } catch (err) {\r\n            Error.notification.error(err.response.data.error)\r\n        }\r\n    }\r\n\r\n\r\n    const layout = {\r\n        labelCol: { span: 24 },\r\n        wrapperCol: { span: 24 },\r\n      };\r\n      \r\n    return (\r\n        <>\r\n        <Form\r\n        {...layout} \r\n        layout='vertical'\r\n        onFinish={onFinish}\r\n        form={form}\r\n        className='form-container'\r\n        name='employee-f'\r\n        >   \r\n            <ControlPanel onReset={onReset} />\r\n\r\n            <Row gutter={16} className='form-input-items' >\r\n                <Col span={8}>\r\n                    <Form.Item\r\n                    label=\"Name\"\r\n                    name=\"name\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                    label=\"Code\"\r\n                    name=\"code\"\r\n                    rules={[{ required: true, message: 'Field Should not be Empty!' }]}\r\n                    >\r\n                        <Input  />\r\n                    </Form.Item>\r\n\r\n                </Col>\r\n                <Col span={8}>\r\n                <Title level={5}>Contact Information</Title>\r\n                        \r\n                        <Form.List name=\"lang\" {...layout} >\r\n                            {(fields, { add, remove }) => (\r\n                            <>\r\n                                {fields.map(field => (\r\n                                <Space key={field.key} style={{ display: 'flex', marginBottom: 8, }} >\r\n                                    <Form.Item\r\n                                    {...field}\r\n                                    label=\"Language\"\r\n                                    rules={[{ required: true, message: 'field should not be empty!ty!' }]}\r\n                                    >\r\n                                        <Input placeholder=\"Languages\" style={{ width: \"100%\" }} />\r\n                                    </Form.Item>\r\n                                    <MinusCircleOutlined onClick={() => remove(field.name)} />\r\n                                </Space>\r\n                                ))}\r\n                                <Form.Item>\r\n                                    <Button type=\"dashed\" onClick={() => add()} block icon={<PlusOutlined />}>\r\n                                        Add field\r\n                                    </Button>\r\n                                </Form.Item>\r\n                            </>\r\n                            )}\r\n                        </Form.List>\r\n                </Col>\r\n            </Row>    \r\n        </Form>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default CountryForm;","D:\\My-git-projects\\book_store_mis\\client\\src\\components\\controlpanel\\controlpanel.jsx",["220","221"],"import react, { useState } from 'react';\r\n\r\nimport { useRouteMatch, useHistory } from 'react-router-dom';\r\n\r\n// ANT\r\nimport { Form, Space, Button } from 'antd';\r\nimport { \r\n    PlusCircleOutlined, \r\n    DeleteOutlined, \r\n    EditOutlined, \r\n    SaveOutlined,\r\n    LeftCircleOutlined, \r\n    ClearOutlined \r\n} from '@ant-design/icons';\r\n\r\nexport const ControlPanel = (props) => {\r\n    const { url } = useRouteMatch();\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <>\r\n            {props.type === \"view\" ? (\r\n                <Space style={{ marginBottom: 16 }} size='middle'>\r\n                    <Button \r\n                        type='primary' \r\n                        shape=\"round\"\r\n                        onClick={() => history.push(`${url}/add`)} \r\n                        icon={<PlusCircleOutlined />}>\r\n                        Add\r\n                    </Button>\r\n                    <Button \r\n                        onClick={props.onDelete}\r\n                        shape=\"round\"\r\n                        disabled\r\n                        danger\r\n                        icon={<DeleteOutlined />}\r\n                        >\r\n                        Delete\r\n                    </Button>\r\n                    <Button \r\n                        onClick={props.onEdit}\r\n                        shape=\"round\"\r\n                        disabled\r\n                        danger\r\n                        icon={<EditOutlined />}\r\n                        >\r\n                        Edit\r\n                    </Button>\r\n                </Space>\r\n            ) : (\r\n                <Space  className='form-action-items'>\r\n                <Form.Item>\r\n                    <Button htmlType=\"submit\" shape=\"round\" type='primary' icon={<SaveOutlined />} name='employeesumit' >\r\n                        Save\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"button\" danger shape=\"round\" icon={<LeftCircleOutlined />} onClick={() => window.history.back()}>\r\n                        Cancel\r\n                    </Button>\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button htmlType=\"button\" shape=\"round\" icon={<ClearOutlined />} onClick={props.onReset}>\r\n                        Clean Form\r\n                    </Button>\r\n                </Form.Item>\r\n                </Space>\r\n            )}\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"222","replacedBy":"226"},{"ruleId":"224","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":8,"column":1,"nodeType":"230","endLine":31,"endColumn":2},{"ruleId":"231","severity":2,"message":"232","line":11,"column":25,"nodeType":"233","endLine":11,"endColumn":35},{"ruleId":"228","severity":1,"message":"234","line":3,"column":1,"nodeType":"230","endLine":5,"endColumn":2},{"ruleId":"222","replacedBy":"235"},{"ruleId":"224","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":29,"column":8,"nodeType":"239","endLine":29,"endColumn":10,"suggestions":"240"},{"ruleId":"222","replacedBy":"241"},{"ruleId":"224","replacedBy":"242"},{"ruleId":"237","severity":1,"message":"243","line":96,"column":8,"nodeType":"239","endLine":96,"endColumn":10,"suggestions":"244"},{"ruleId":"228","severity":1,"message":"229","line":5,"column":1,"nodeType":"230","endLine":20,"endColumn":2},{"ruleId":"237","severity":1,"message":"245","line":52,"column":8,"nodeType":"239","endLine":52,"endColumn":17,"suggestions":"246"},{"ruleId":"247","severity":1,"message":"248","line":78,"column":33,"nodeType":"249","messageId":"250","endLine":78,"endColumn":35},{"ruleId":"237","severity":1,"message":"245","line":70,"column":8,"nodeType":"239","endLine":70,"endColumn":17,"suggestions":"251"},{"ruleId":"237","severity":1,"message":"245","line":74,"column":8,"nodeType":"239","endLine":74,"endColumn":17,"suggestions":"252"},{"ruleId":"237","severity":1,"message":"245","line":73,"column":8,"nodeType":"239","endLine":73,"endColumn":17,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":16,"column":5,"nodeType":"233","messageId":"256","endLine":16,"endColumn":11},{"ruleId":"254","severity":1,"message":"257","line":34,"column":11,"nodeType":"233","messageId":"256","endLine":34,"endColumn":24},{"ruleId":"254","severity":1,"message":"258","line":1,"column":8,"nodeType":"233","messageId":"256","endLine":1,"endColumn":13},{"ruleId":"254","severity":1,"message":"259","line":1,"column":17,"nodeType":"233","messageId":"256","endLine":1,"endColumn":25},"no-native-reassign",["260"],"no-negated-in-lhs",["261"],["260"],["261"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/rules-of-hooks","React Hook \"useHistory\" is called in function \"employee\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","Identifier","Assign arrow function to a variable before exporting as module default",["260"],["261"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'CheckType'. Either include it or remove the dependency array.","ArrayExpression",["262"],["260"],["261"],"React Hook useEffect has missing dependencies: 'FetchPrivateDate' and 'id'. Either include them or remove the dependency array.",["263"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["264"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["265"],["266"],["267"],"no-unused-vars","'Select' is defined but never used.","unusedVar","'addNewCountry' is assigned a value but never used.","'react' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"272","fix":"274"},{"desc":"272","fix":"275"},{"desc":"272","fix":"276"},"Update the dependencies array to be: [CheckType]",{"range":"277","text":"278"},"Update the dependencies array to be: [FetchPrivateDate, id]",{"range":"279","text":"280"},"Update the dependencies array to be: [fetchData, history]",{"range":"281","text":"282"},{"range":"283","text":"282"},{"range":"284","text":"282"},{"range":"285","text":"282"},[832,834],"[CheckType]",[2655,2657],"[FetchPrivateDate, id]",[1303,1312],"[fetchData, history]",[1802,1811],[1920,1929],[1863,1872]]